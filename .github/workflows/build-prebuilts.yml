name: Build prebuilts (whisper.cpp | llama.cpp | ydotool)

on:
  workflow_dispatch:
    inputs:
      whisper_repo:
        description: "Upstream repo for whisper.cpp"
        required: true
        default: "ggml-org/whisper.cpp"
      whisper_ref:
        description: "Tag/branch/commit for whisper.cpp"
        required: true
        default: "master"
      llama_repo:
        description: "Upstream repo for llama.cpp"
        required: true
        default: "ggml-org/llama.cpp"
      llama_ref:
        description: "Tag/branch/commit for llama.cpp"
        required: true
        default: "master"
      ydotool_repo:
        description: "Upstream repo for ydotool"
        required: true
        default: "ReimuNotMoe/ydotool"
      ydotool_ref:
        description: "Tag/branch/commit for ydotool"
        required: true
        default: "master"
      prerelease:
        description: "Mark GitHub Release as prerelease"
        required: true
        type: boolean
        default: true
      release_title:
        description: "Optional release title (auto if empty)"
        required: false
        default: ""

permissions:
  contents: write  # allow uploading release assets

jobs:
  prepare:
    name: Prepare release metadata
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.mk.outputs.tag }}
      name: ${{ steps.mk.outputs.name }}
    steps:
      - name: Compute tag and name
        id: mk
        run: |
          set -e
          dt="$(date -u +%Y%m%d-%H%M)"
          # Make "slug" versions of refs (safe for tag names)
          slug() { echo "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._-]+/-/g'; }
          wslug="$(slug "${{ inputs.whisper_ref }}")"
          lslug="$(slug "${{ inputs.llama_ref }}")"
          tag="pb-${dt}-whspr-${wslug}-llama-${lslug}"
          name="${{ inputs.release_title }}"
          if [ -z "$name" ]; then
            name="VOXT prebuilts ${dt} (wc=${{ inputs.whisper_ref }}, ll=${{ inputs.llama_ref }})"
          fi
          echo "tag=$tag"   >> "$GITHUB_OUTPUT"
          echo "name=$name" >> "$GITHUB_OUTPUT"

  build-amd64:
    name: Build amd64 (${{ matrix.variant }})
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        variant: [avx2, sse42]
    steps:
      - uses: actions/checkout@v4

      - name: Build in manylinux2014_x86_64
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/w" -w /w \
            quay.io/pypa/manylinux2014_x86_64 /bin/bash -lc '
            set -e
            yum -y install gcc gcc-c++ make cmake tar which git binutils libcurl-devel openssl-devel zlib-devel

            git clone "https://github.com/${{ inputs.whisper_repo }}.git" _src/whisper.cpp
            ( cd _src/whisper.cpp && git fetch --all --tags --depth=1 || true; git checkout "${{ inputs.whisper_ref }}" )
            git clone "https://github.com/${{ inputs.llama_repo }}.git" _src/llama.cpp
            ( cd _src/llama.cpp && git fetch --all --tags --depth=1 || true; git checkout "${{ inputs.llama_ref }}" )

            if [ "${{ matrix.variant }}" = "avx2" ]; then CFLAGS="-O3 -mavx2 -mfma -mf16c"; else CFLAGS="-O3 -msse4.2"; fi

            mkdir -p /w/_build/whisper && cd /w/_build/whisper
            cmake -S /w/_src/whisper.cpp -B . \
              -DGGML_NATIVE=OFF -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CFLAGS"
            cmake --build . -j"$(nproc)" --target whisper-cli
            strip --strip-unneeded bin/whisper-cli || true
            mkdir -p dist/whisper
            cp bin/whisper-cli dist/whisper/
            cp /w/_src/whisper.cpp/LICENSE dist/whisper/LICENSE
            printf "%s\n" \
              "project=whisper.cpp" \
              "repo=${{ inputs.whisper_repo }}" \
              "ref=${{ inputs.whisper_ref }}" \
              "variant=${{ matrix.variant }}" \
              "flags=$CFLAGS" \
              "built_at=$(date -u +%F)" \
              "env=manylinux2014_x86_64" \
              > dist/whisper/BUILDINFO.txt

            mkdir -p /w/_build/llama && cd /w/_build/llama
            cmake -S /w/_src/llama.cpp -B . \
              -DGGML_NATIVE=OFF -DBUILD_SHARED_LIBS=OFF \
              -DLLAMA_SERVER=ON -DLLAMA_CURL=ON \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CFLAGS"
            cmake --build . -j"$(nproc)" --target llama-server
            strip --strip-unneeded bin/llama-server || true
            mkdir -p dist/llama
            cp bin/llama-server dist/llama/
            cp /w/_src/llama.cpp/LICENSE dist/llama/LICENSE
            printf "%s\n" \
              "project=llama.cpp" \
              "repo=${{ inputs.llama_repo }}" \
              "ref=${{ inputs.llama_ref }}" \
              "variant=${{ matrix.variant }}" \
              "flags=$CFLAGS" \
              "built_at=$(date -u +%F)" \
              "env=manylinux2014_x86_64" \
              > dist/llama/BUILDINFO.txt

            mkdir -p /w/release
            tar -C /w/_build/whisper/dist/whisper -czf /w/release/whisper-cli_linux_amd64_${{ matrix.variant }}.tar.gz .
            tar -C /w/_build/llama/dist/llama   -czf /w/release/llama-server_linux_amd64_${{ matrix.variant }}.tar.gz .
            (cd /w/release && sha256sum *.tar.gz > SHA256SUMS_amd64_${{ matrix.variant }}.txt)
            ls -al /w/release
          '
      - name: List release
        run: ls -al "${{ github.workspace }}/release" || true

      - uses: actions/upload-artifact@v4
        with:
          name: amd64-${{ matrix.variant }}
          path: ${{ github.workspace }}/release/*

  build-arm64:
    name: Build arm64
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build in manylinux2014_aarch64 container
        run: |
          docker run --rm --platform=linux/arm64 \
            -v "${{ github.workspace }}:/w" -w /w quay.io/pypa/manylinux2014_aarch64 /bin/bash -lc '
            set -e
            yum -y install gcc gcc-c++ make cmake tar which git binutils libcurl-devel openssl-devel zlib-devel
            git clone "https://github.com/${{ inputs.whisper_repo }}.git" _src/whisper.cpp
            ( cd _src/whisper.cpp && git fetch --all --tags --depth=1 || true; git checkout "${{ inputs.whisper_ref }}" )
            git clone "https://github.com/${{ inputs.llama_repo }}.git" _src/llama.cpp
            ( cd _src/llama.cpp && git fetch --all --tags --depth=1 || true; git checkout "${{ inputs.llama_ref }}" )

            CFLAGS="-O3"

            mkdir -p /w/_build/whisper && cd /w/_build/whisper
            cmake -S /w/_src/whisper.cpp -B . \
              -DGGML_NATIVE=OFF -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CFLAGS"
            cmake --build . -j"$(nproc)" --target whisper-cli
            strip --strip-unneeded bin/whisper-cli || true
            mkdir -p dist/whisper
            cp bin/whisper-cli dist/whisper/
            cp /w/_src/whisper.cpp/LICENSE dist/whisper/LICENSE
            printf "%s\n" \
              "project=whisper.cpp" \
              "repo=${{ inputs.whisper_repo }}" \
              "ref=${{ inputs.whisper_ref }}" \
              "variant=neon" \
              "flags=$CFLAGS" \
              "built_at=$(date -u +%F)" \
              "env=manylinux2014_aarch64" \
              > dist/whisper/BUILDINFO.txt

            mkdir -p /w/_build/llama && cd /w/_build/llama
            cmake -S /w/_src/llama.cpp -B . \
              -DGGML_NATIVE=OFF -DBUILD_SHARED_LIBS=OFF \
              -DLLAMA_SERVER=ON -DLLAMA_CURL=ON \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CFLAGS"
            cmake --build . -j"$(nproc)" --target llama-server
            strip --strip-unneeded bin/llama-server || true
            mkdir -p dist/llama
            cp bin/llama-server dist/llama/
            cp /w/_src/llama.cpp/LICENSE dist/llama/LICENSE
            printf "%s\n" \
              "project=llama.cpp" \
              "repo=${{ inputs.llama_repo }}" \
              "ref=${{ inputs.llama_ref }}" \
              "variant=neon" \
              "flags=$CFLAGS" \
              "built_at=$(date -u +%F)" \
              "env=manylinux2014_aarch64" \
              > dist/llama/BUILDINFO.txt

            mkdir -p /w/release
            tar -C /w/_build/whisper/dist/whisper -czf /w/release/whisper-cli_linux_arm64.tar.gz .
            tar -C /w/_build/llama/dist/llama   -czf /w/release/llama-server_linux_arm64.tar.gz .
            (cd /w/release && sha256sum *.tar.gz > SHA256SUMS_arm64.txt)
            ls -al /w/release
          '

      - name: List release
        run: ls -al "${{ github.workspace }}/release" || true

      - uses: actions/upload-artifact@v4
        with:
          name: arm64
          path: ${{ github.workspace }}/release/*

  build-ydotool-amd64:
    name: Build ydotool amd64
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Build in manylinux2014_x86_64
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/w" -w /w \
            quay.io/pypa/manylinux2014_x86_64 /bin/bash -lc '
            set -e
            yum -y install gcc gcc-c++ make tar which git binutils curl kernel-headers
            CMAKE_VER=3.28.6
            ARCH=x86_64
            curl -fsSL -o /tmp/cmake.tgz https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}-linux-${ARCH}.tar.gz
            mkdir -p /opt/cmake && tar -C /opt/cmake --strip-components=1 -xzf /tmp/cmake.tgz
            export PATH=/opt/cmake/bin:$PATH
            cmake --version

            git clone "https://github.com/${{ inputs.ydotool_repo }}.git" _src/ydotool
            ( cd _src/ydotool && git fetch --all --tags --depth=1 || true; git checkout "${{ inputs.ydotool_ref }}" )

            # Provide modern Linux UAPI headers (CentOS 7 headers lack newer input/uinput symbols)
            mkdir -p /w/_deps/linux-uapi/include/uapi/linux
            curl -fsSL -o /w/_deps/linux-uapi/include/uapi/linux/uinput.h \
              https://raw.githubusercontent.com/torvalds/linux/v6.6/include/uapi/linux/uinput.h
            curl -fsSL -o /w/_deps/linux-uapi/include/uapi/linux/input.h \
              https://raw.githubusercontent.com/torvalds/linux/v6.6/include/uapi/linux/input.h
            curl -fsSL -o /w/_deps/linux-uapi/include/uapi/linux/input-event-codes.h \
              https://raw.githubusercontent.com/torvalds/linux/v6.6/include/uapi/linux/input-event-codes.h

            mkdir -p /w/_build/ydotool && cd /w/_build/ydotool
            cmake -S /w/_src/ydotool -B . \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_DOCS=OFF \
              -DSYSTEMD_USER_SERVICE=OFF \
              -DSYSTEMD_SYSTEM_SERVICE=OFF \
              -DCMAKE_C_FLAGS="-I/w/_deps/linux-uapi/include/uapi -D__user="
            cmake --build . -j"$(nproc)" --target ydotool ydotoold

            # Locate built binaries robustly
            ydt_cli="$(find . -maxdepth 5 -type f -name ydotool -executable | head -n1)"
            ydt_daem="$(find . -maxdepth 5 -type f -name ydotoold -executable | head -n1)"
            echo "Found ydotool: $ydt_cli"
            echo "Found ydotoold: $ydt_daem"
            strip --strip-unneeded "$ydt_cli"  || true
            strip --strip-unneeded "$ydt_daem" || true

            mkdir -p dist/cli dist/daemon
            cp "$ydt_cli"  dist/cli/ydotool
            cp "$ydt_daem" dist/daemon/ydotoold
            cp /w/_src/ydotool/LICENSE dist/cli/LICENSE
            cp /w/_src/ydotool/LICENSE dist/daemon/LICENSE
            commit="$(cd /w/_src/ydotool && git rev-parse HEAD)"
            printf "%s\n" \
              "project=ydotool" \
              "repo=${{ inputs.ydotool_repo }}" \
              "ref=${{ inputs.ydotool_ref }}" \
              "commit=$commit" \
              "built_at=$(date -u +%F)" \
              "env=manylinux2014_x86_64" \
              > dist/cli/BUILDINFO.txt
            cp dist/cli/BUILDINFO.txt dist/daemon/BUILDINFO.txt

            mkdir -p /w/release
            tar -C dist/cli    -czf /w/release/ydotool_linux_amd64.tar.gz .
            tar -C dist/daemon -czf /w/release/ydotoold_linux_amd64.tar.gz .
            ( cd /w/_src/ydotool && git archive --format=tar.gz --output=/w/release/ydotool-src_${commit}.tar.gz "$commit" )
            (cd /w/release && sha256sum *.tar.gz > SHA256SUMS_ydotool_amd64.txt)
            ls -al /w/release
          '

      - name: List release
        run: ls -al "${{ github.workspace }}/release" || true

      - uses: actions/upload-artifact@v4
        with:
          name: ydotool-amd64
          path: ${{ github.workspace }}/release/*

  build-ydotool-arm64:
    name: Build ydotool arm64
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build in manylinux2014_aarch64
        run: |
          docker run --rm --platform=linux/arm64 \
            -v "${{ github.workspace }}:/w" -w /w quay.io/pypa/manylinux2014_aarch64 /bin/bash -lc '
            set -e
            yum -y install gcc gcc-c++ make tar which git binutils curl kernel-headers
            CMAKE_VER=3.28.6
            ARCH=aarch64
            curl -fsSL -o /tmp/cmake.tgz https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}-linux-${ARCH}.tar.gz
            mkdir -p /opt/cmake && tar -C /opt/cmake --strip-components=1 -xzf /tmp/cmake.tgz
            export PATH=/opt/cmake/bin:$PATH
            cmake --version

            git clone "https://github.com/${{ inputs.ydotool_repo }}.git" _src/ydotool
            ( cd _src/ydotool && git fetch --all --tags --depth=1 || true; git checkout "${{ inputs.ydotool_ref }}" )

            mkdir -p /w/_build/ydotool && cd /w/_build/ydotool
            cmake -S /w/_src/ydotool -B . \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_DOCS=OFF \
              -DSYSTEMD_USER_SERVICE=OFF \
              -DSYSTEMD_SYSTEM_SERVICE=OFF
            cmake --build . -j"$(nproc)" --target ydotool ydotoold

            # Locate built binaries robustly
            ydt_cli="$(find . -maxdepth 5 -type f -name ydotool -executable | head -n1)"
            ydt_daem="$(find . -maxdepth 5 -type f -name ydotoold -executable | head -n1)"
            echo "Found ydotool: $ydt_cli"
            echo "Found ydotoold: $ydt_daem"
            strip --strip-unneeded "$ydt_cli"  || true
            strip --strip-unneeded "$ydt_daem" || true

            mkdir -p dist/cli dist/daemon
            cp "$ydt_cli"  dist/cli/ydotool
            cp "$ydt_daem" dist/daemon/ydotoold
            cp /w/_src/ydotool/LICENSE dist/cli/LICENSE
            cp /w/_src/ydotool/LICENSE dist/daemon/LICENSE
            commit="$(cd /w/_src/ydotool && git rev-parse HEAD)"
            printf "%s\n" \
              "project=ydotool" \
              "repo=${{ inputs.ydotool_repo }}" \
              "ref=${{ inputs.ydotool_ref }}" \
              "commit=$commit" \
              "built_at=$(date -u +%F)" \
              "env=manylinux2014_aarch64" \
              > dist/cli/BUILDINFO.txt
            cp dist/cli/BUILDINFO.txt dist/daemon/BUILDINFO.txt

            mkdir -p /w/release
            tar -C dist/cli    -czf /w/release/ydotool_linux_arm64.tar.gz .
            tar -C dist/daemon -czf /w/release/ydotoold_linux_arm64.tar.gz .
            ( cd /w/_src/ydotool && git archive --format=tar.gz --output=/w/release/ydotool-src_${commit}.tar.gz "$commit" )
            (cd /w/release && sha256sum *.tar.gz > SHA256SUMS_ydotool_arm64.txt)
            ls -al /w/release
          '

      - name: List release
        run: ls -al "${{ github.workspace }}/release" || true

      - uses: actions/upload-artifact@v4
        with:
          name: ydotool-arm64
          path: ${{ github.workspace }}/release/*

  publish:
    name: Publish GitHub Release
    needs: [prepare, build-amd64, build-arm64, build-ydotool-amd64, build-ydotool-arm64]
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _dl

      - name: Collate release folder
        run: |
          set -e
          mkdir -p release
          cp _dl/amd64-avx2/*   release/ || true
          cp _dl/amd64-sse42/*  release/ || true
          cp _dl/arm64/*        release/ || true
          cp _dl/ydotool-amd64/*  release/ || true
          cp _dl/ydotool-arm64/*  release/ || true
          ( cd release && sha256sum *.tar.gz > SHA256SUMS_ALL.txt )

      - name: Create/Update release and upload assets (gh)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tag="${{ needs.prepare.outputs.tag }}"
          name="${{ needs.prepare.outputs.name }}"
          # Create release if it doesn't exist
          if ! gh release view "$tag" >/dev/null 2>&1; then
            gh release create "$tag" \
              --title "$name" \
              --notes "Prebuilt whisper.cpp, llama.cpp, and ydotool (client + daemon) binaries. Includes upstream LICENSE files and ydotool corresponding source tarballs for AGPL-3.0 compliance." \
              --prerelease \
              --latest=false \
              --target "$GITHUB_SHA"
          fi
          # Upload files (skip if none match)
          shopt -s nullglob
          files=(release/*.tar.gz release/SHA256SUMS_*.txt)
          if ((${#files[@]})); then
            gh release upload "$tag" "${files[@]}" --clobber
          else
            echo "No files to upload"; exit 1
          fi
